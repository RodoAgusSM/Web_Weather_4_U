{"ast":null,"code":"var _jsxFileName = \"/Users/rodoagus/Desktop/Personal_projects/Web_Weather_4_U/Weather_4_U/src/components/SunriseSunsetInfo/SunsetSunriseInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GlobalStyle, WeatherCard, MiInfo, SocialNetworkName, SocialNetworkItem, NetworkContainer, NetworkMapContainer, MiInfoContainer, BackContainer, BackIcon } from '../../styles/styles';\nimport { findLanguageByKey } from '../../languages/Languages';\nimport { Code, BreakLine } from '../../styles/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SunriseSunsetInfo = _ref => {\n  _s();\n\n  let {\n    actualLanguage,\n    lat,\n    lon,\n    sunrise,\n    sunset\n  } = _ref;\n\n  const {\n    find\n  } = require('geo-tz');\n\n  const fullLanguage = findLanguageByKey(actualLanguage);\n  let [timeChanged, setTimeChanged] = useState('');\n  useEffect(() => {\n    toLocalCityTime();\n  }, [timeChanged]);\n\n  const toLocalCityTime = offset => {\n    sunrise = new Date(sunrise * 1000).toLocaleString([], {\n      timeStyle: 'short',\n      timeZone: find(lat, lon)[0]\n    });\n    sunset = new Date(sunset * 1000).toLocaleString([], {\n      timeStyle: 'short',\n      timeZone: find(lat, lon)[0]\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Code, {\n      children: [fullLanguage.words.sunrise, \" \", sunrise]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(BreakLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Code, {\n      children: [fullLanguage.words.sunset, \" \", sunset]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SunriseSunsetInfo, \"atV9CXAWq8c9VLfI5TbG772XQ9A=\");\n\n_c = SunriseSunsetInfo;\nexport default SunriseSunsetInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SunriseSunsetInfo\");","map":{"version":3,"names":["React","useState","useEffect","GlobalStyle","WeatherCard","MiInfo","SocialNetworkName","SocialNetworkItem","NetworkContainer","NetworkMapContainer","MiInfoContainer","BackContainer","BackIcon","findLanguageByKey","Code","BreakLine","SunriseSunsetInfo","actualLanguage","lat","lon","sunrise","sunset","find","require","fullLanguage","timeChanged","setTimeChanged","toLocalCityTime","offset","Date","toLocaleString","timeStyle","timeZone","words"],"sources":["/Users/rodoagus/Desktop/Personal_projects/Web_Weather_4_U/Weather_4_U/src/components/SunriseSunsetInfo/SunsetSunriseInfo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n\tGlobalStyle,\n\tWeatherCard,\n\tMiInfo,\n\tSocialNetworkName,\n\tSocialNetworkItem,\n\tNetworkContainer,\n\tNetworkMapContainer,\n\tMiInfoContainer,\n\tBackContainer,\n\tBackIcon,\n} from '../../styles/styles';\nimport { findLanguageByKey } from '../../languages/Languages';\nimport { Code, BreakLine } from '../../styles/styles';\n\nconst SunriseSunsetInfo = ({ actualLanguage, lat, lon, sunrise, sunset }) => {\n\tconst { find } = require('geo-tz');\n\n\tconst fullLanguage = findLanguageByKey(actualLanguage);\n\tlet [timeChanged, setTimeChanged] = useState('');\n\tuseEffect(() => {\n\t\ttoLocalCityTime();\n\t}, [timeChanged]);\n\n\tconst toLocalCityTime = (offset) => {\n\t\tsunrise = new Date(sunrise * 1000).toLocaleString([], {\n\t\t\ttimeStyle: 'short',\n\t\t\ttimeZone: find(lat, lon)[0],\n\t\t});\n\n\t\tsunset = new Date(sunset * 1000).toLocaleString([], {\n\t\t\ttimeStyle: 'short',\n\t\t\ttimeZone: find(lat, lon)[0],\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Code>\n\t\t\t\t{fullLanguage.words.sunrise} {sunrise}\n\t\t\t</Code>\n\t\t\t<BreakLine />\n\t\t\t<Code>\n\t\t\t\t{fullLanguage.words.sunset} {sunset}\n\t\t\t</Code>\n\t\t</div>\n\t);\n};\n\nexport default SunriseSunsetInfo;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACCC,WADD,EAECC,WAFD,EAGCC,MAHD,EAICC,iBAJD,EAKCC,iBALD,EAMCC,gBAND,EAOCC,mBAPD,EAQCC,eARD,EASCC,aATD,EAUCC,QAVD,QAWO,qBAXP;AAYA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,qBAAhC;;;AAEA,MAAMC,iBAAiB,GAAG,QAAmD;EAAA;;EAAA,IAAlD;IAAEC,cAAF;IAAkBC,GAAlB;IAAuBC,GAAvB;IAA4BC,OAA5B;IAAqCC;EAArC,CAAkD;;EAC5E,MAAM;IAAEC;EAAF,IAAWC,OAAO,CAAC,QAAD,CAAxB;;EAEA,MAAMC,YAAY,GAAGX,iBAAiB,CAACI,cAAD,CAAtC;EACA,IAAI,CAACQ,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,EAAD,CAA5C;EACAC,SAAS,CAAC,MAAM;IACfyB,eAAe;EACf,CAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;EAIA,MAAME,eAAe,GAAIC,MAAD,IAAY;IACnCR,OAAO,GAAG,IAAIS,IAAJ,CAAST,OAAO,GAAG,IAAnB,EAAyBU,cAAzB,CAAwC,EAAxC,EAA4C;MACrDC,SAAS,EAAE,OAD0C;MAErDC,QAAQ,EAAEV,IAAI,CAACJ,GAAD,EAAMC,GAAN,CAAJ,CAAe,CAAf;IAF2C,CAA5C,CAAV;IAKAE,MAAM,GAAG,IAAIQ,IAAJ,CAASR,MAAM,GAAG,IAAlB,EAAwBS,cAAxB,CAAuC,EAAvC,EAA2C;MACnDC,SAAS,EAAE,OADwC;MAEnDC,QAAQ,EAAEV,IAAI,CAACJ,GAAD,EAAMC,GAAN,CAAJ,CAAe,CAAf;IAFyC,CAA3C,CAAT;EAIA,CAVD;;EAYA,oBACC;IAAA,wBACC,QAAC,IAAD;MAAA,WACEK,YAAY,CAACS,KAAb,CAAmBb,OADrB,OAC+BA,OAD/B;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,eAIC,QAAC,SAAD;MAAA;MAAA;MAAA;IAAA,QAJD,eAKC,QAAC,IAAD;MAAA,WACEI,YAAY,CAACS,KAAb,CAAmBZ,MADrB,OAC8BA,MAD9B;IAAA;MAAA;MAAA;MAAA;IAAA,QALD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AAWA,CAhCD;;GAAML,iB;;KAAAA,iB;AAkCN,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}