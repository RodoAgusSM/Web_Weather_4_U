{"ast":null,"code":"var _jsxFileName = \"/Users/rodoagus/Desktop/Personal_projects/Web_Weather_4_U/Weather_4_U/src/components/SunriseSunsetInfo/SunsetSunriseInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { GlobalStyle, WeatherCard, MiInfo, SocialNetworkName, SocialNetworkItem, NetworkContainer, NetworkMapContainer, MiInfoContainer, BackContainer, BackIcon } from '../../styles/styles';\nimport { findLanguageByKey } from '../../languages/Languages';\nimport { Code, BreakLine } from '../../styles/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SunriseSunsetInfo = _ref => {\n  _s();\n\n  let {\n    actualLanguage,\n    lat,\n    lon,\n    sunrise,\n    sunset\n  } = _ref;\n\n  const {\n    find\n  } = require('geo-tz');\n\n  const sunriseTime = new Date(sunrise).toLocaleString('es-UY', {\n    hour: '2-digit',\n    minutes: '2-digit',\n    timeZone: find(lat, lon)[0]\n  });\n  const sunsetTime = new Date(sunrise).toLocaleString('es-UY', {\n    hour: '2-digit',\n    minutes: '2-digit',\n    timeZone: find(lat, lon)[0]\n  });\n  const fullLanguage = findLanguageByKey(actualLanguage);\n  let [timeChanged, setTimeChanged] = useState([]);\n  useEffect(() => {//toLocalCityTime();\n  }, [timeChanged]);\n  /* const toLocalCityTime = (offset) => {\n  \tlet date = new Date();\n  \tlet utc = date.getTime() + date.getTimezoneOffset() * 60000;\n  \tlet nd = new Date(utc + 3600000 * offset);\n  \tconsole.log(nd.toLocaleString());\n  }; */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Code, {\n      children: [fullLanguage.words.sunrise, \" \", sunriseTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(BreakLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Code, {\n      children: [fullLanguage.words.sunset, \" \", sunsetTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SunriseSunsetInfo, \"eVv4GyTs/Oi1rGOitKvXHR0sb5Y=\");\n\n_c = SunriseSunsetInfo;\nexport default SunriseSunsetInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SunriseSunsetInfo\");","map":{"version":3,"names":["React","useState","GlobalStyle","WeatherCard","MiInfo","SocialNetworkName","SocialNetworkItem","NetworkContainer","NetworkMapContainer","MiInfoContainer","BackContainer","BackIcon","findLanguageByKey","Code","BreakLine","SunriseSunsetInfo","actualLanguage","lat","lon","sunrise","sunset","find","require","sunriseTime","Date","toLocaleString","hour","minutes","timeZone","sunsetTime","fullLanguage","timeChanged","setTimeChanged","useEffect","words"],"sources":["/Users/rodoagus/Desktop/Personal_projects/Web_Weather_4_U/Weather_4_U/src/components/SunriseSunsetInfo/SunsetSunriseInfo.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n\tGlobalStyle,\n\tWeatherCard,\n\tMiInfo,\n\tSocialNetworkName,\n\tSocialNetworkItem,\n\tNetworkContainer,\n\tNetworkMapContainer,\n\tMiInfoContainer,\n\tBackContainer,\n\tBackIcon,\n} from '../../styles/styles';\nimport { findLanguageByKey } from '../../languages/Languages';\nimport { Code, BreakLine } from '../../styles/styles';\n\nconst SunriseSunsetInfo = ({ actualLanguage, lat, lon, sunrise, sunset }) => {\n\tconst { find } = require('geo-tz');\n\n\tconst sunriseTime = new Date(sunrise).toLocaleString('es-UY', {\n\t\thour: '2-digit',\n\t\tminutes: '2-digit',\n\t\ttimeZone: find(lat, lon)[0],\n\t});\n\n\tconst sunsetTime = new Date(sunrise).toLocaleString('es-UY', {\n\t\thour: '2-digit',\n\t\tminutes: '2-digit',\n\t\ttimeZone: find(lat, lon)[0],\n\t});\n\n\tconst fullLanguage = findLanguageByKey(actualLanguage);\n\tlet [timeChanged, setTimeChanged] = useState([]);\n\tuseEffect(() => {\n\t\t//toLocalCityTime();\n\t}, [timeChanged]);\n\n\t/* const toLocalCityTime = (offset) => {\n\t\tlet date = new Date();\n\t\tlet utc = date.getTime() + date.getTimezoneOffset() * 60000;\n\t\tlet nd = new Date(utc + 3600000 * offset);\n\t\tconsole.log(nd.toLocaleString());\n\t}; */\n\n\treturn (\n\t\t<div>\n\t\t\t<Code>\n\t\t\t\t{fullLanguage.words.sunrise} {sunriseTime}\n\t\t\t</Code>\n\t\t\t<BreakLine />\n\t\t\t<Code>\n\t\t\t\t{fullLanguage.words.sunset} {sunsetTime}\n\t\t\t</Code>\n\t\t</div>\n\t);\n};\n\nexport default SunriseSunsetInfo;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACCC,WADD,EAECC,WAFD,EAGCC,MAHD,EAICC,iBAJD,EAKCC,iBALD,EAMCC,gBAND,EAOCC,mBAPD,EAQCC,eARD,EASCC,aATD,EAUCC,QAVD,QAWO,qBAXP;AAYA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,qBAAhC;;;AAEA,MAAMC,iBAAiB,GAAG,QAAmD;EAAA;;EAAA,IAAlD;IAAEC,cAAF;IAAkBC,GAAlB;IAAuBC,GAAvB;IAA4BC,OAA5B;IAAqCC;EAArC,CAAkD;;EAC5E,MAAM;IAAEC;EAAF,IAAWC,OAAO,CAAC,QAAD,CAAxB;;EAEA,MAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASL,OAAT,EAAkBM,cAAlB,CAAiC,OAAjC,EAA0C;IAC7DC,IAAI,EAAE,SADuD;IAE7DC,OAAO,EAAE,SAFoD;IAG7DC,QAAQ,EAAEP,IAAI,CAACJ,GAAD,EAAMC,GAAN,CAAJ,CAAe,CAAf;EAHmD,CAA1C,CAApB;EAMA,MAAMW,UAAU,GAAG,IAAIL,IAAJ,CAASL,OAAT,EAAkBM,cAAlB,CAAiC,OAAjC,EAA0C;IAC5DC,IAAI,EAAE,SADsD;IAE5DC,OAAO,EAAE,SAFmD;IAG5DC,QAAQ,EAAEP,IAAI,CAACJ,GAAD,EAAMC,GAAN,CAAJ,CAAe,CAAf;EAHkD,CAA1C,CAAnB;EAMA,MAAMY,YAAY,GAAGlB,iBAAiB,CAACI,cAAD,CAAtC;EACA,IAAI,CAACe,WAAD,EAAcC,cAAd,IAAgC/B,QAAQ,CAAC,EAAD,CAA5C;EACAgC,SAAS,CAAC,MAAM,CACf;EACA,CAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;EAIA;AACD;AACA;AACA;AACA;AACA;;EAEC,oBACC;IAAA,wBACC,QAAC,IAAD;MAAA,WACED,YAAY,CAACI,KAAb,CAAmBf,OADrB,OAC+BI,WAD/B;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,eAIC,QAAC,SAAD;MAAA;MAAA;MAAA;IAAA,QAJD,eAKC,QAAC,IAAD;MAAA,WACEO,YAAY,CAACI,KAAb,CAAmBd,MADrB,OAC8BS,UAD9B;IAAA;MAAA;MAAA;MAAA;IAAA,QALD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AAWA,CAvCD;;GAAMd,iB;;KAAAA,iB;AAyCN,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}